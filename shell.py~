class shell1(pygame.sprite.Sprite):
    def __init__(self, dir):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("picture/shell1.png")
        self.image = self.image.convert_alpha()
        self.rect = self.image.get_rect()
        self.rect.center = (2000, 2000)
        self.dy = 7 
        
        if dir == 0:
            self.image = pygame.transform.rotate(self.image, -30)
            self.dx = -2 
        else:
            self.image = pygame.transform.rotate(self.image, 30)
            self.dx = 2 
     
    def update(self):
        if not (self.rect.left > 730 or self.rect.right < -10 or self.rect.top > 560):
            self.rect.centerx += self.dx
            self.rect.centery += self.dy
        else:
            self.rect.center = (2000, 2000)
    
    def release(self, x, y):
        self.rect.center = (x, y)

    def reset(self):
        self.rect.center = (2000 , 2000)

class shell2(pygame.sprite.Sprite):
    def __init__(self, picture, speed):
        pygame.sprite.Sprite.__init__(self)
        self.imageMaster = pygame.image.load(picture)
        self.imageMaster = self.imageMaster.convert_alpha()
        self.image = self.imageMaster
        self.rect = self.image.get_rect()
        self.dir = 0
        self.realx = float() 
        self.realy = float()
        self.dx = float() 
        self.dy = float() 
        self.released = False
        self.speed = speed
        self.reset()

    def reset(self):
        self.rect.center = (1500, 1500)
        self.released = False

    def update(self):
        if self.released:
            if not (self.rect.right < 0 or self.rect.left > 720 or self.rect.bottom < -0 or self.rect.top > 540):

                self.realx += self.dx
                self.realy -= self.dy
                self.rect.centerx = self.realx
                self.rect.centery = self.realy
        else:
            self.reset()

    
    def rotate(self):
        oldcenter = self.rect.center
        self.image = pygame.transform.rotate(self.imageMaster, self.dir)
        self.rect = self.image.get_rect()
        self.rect.center = oldcenter

    def release(self, dir, x , y):
        self.rect.center = (x, y)
        self.realx = x
        self.realy = y
        self.released = True
        self.dir = dir
        self.rotate()
        self.calspeed()

    def calspeed(self):
        if self.dir != 0:
            dx = float(pygame.mouse.get_pos()[0] - self.rect.centerx)
            dy = float(pygame.mouse.get_pos()[1] - self.rect.centery)  
            bias = math.sqrt(dx * dx + dy * dy)
            dy *= -1
            self.dx = self.speed * dx / bias 
            self.dy = self.speed * dy / bias
        else:
            self.dx = 0
            self.dy = self.speed * -1
